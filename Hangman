import java.util.ArrayList;
import javafx.event.ActionEvent;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.scene.shape.Line;
import javafx.scene.shape.Circle;
import javafx.event.EventHandler;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.text.Text;


public class Hangman extends Application 
{
  String secretWord;
  String secretWordTemp;
  int stickManPartsCount = 0;
  Pane pane = new Pane();
  boolean lose = false;
  char[] charArraySecretWord;
    
  @Override
  public void start(Stage primaryStage) 
  {
    Scene scene = new Scene(pane, 1350, 1000);
    primaryStage.setTitle("Hangman Game");
    primaryStage.setScene(scene);             
    primaryStage.show();
    
    Text correctLetters = new Text(900, 300, "Secret Word");
    pane.getChildren().add(correctLetters);
    final TextField TFsecretWord = new TextField();
    pane.getChildren().add(TFsecretWord);
    Button BTNConfirm = new Button("confirm");
    BTNConfirm.setLayoutY(25);
    pane.getChildren().add(BTNConfirm);
    BTNConfirm.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           secretWord = TFsecretWord.getText();
           secretWordTemp = TFsecretWord.getText();
           charArraySecretWord = secretWordTemp.toCharArray();
           TFsecretWord.clear();
        }
    });
    
    final Line[] stickManParts = {new Line(500, 400, 600, 600), new Line(500, 400, 400, 600), new Line(500, 400, 500, 200), new Line(500, 200, 600, 400), new Line(500, 200, 400, 400)};
    for(int index = 0; index < stickManParts.length; index++)
    {
        stickManParts[index].setStrokeWidth(5);
        stickManParts[index].setStroke(Color.TOMATO);
    }
   
    Circle head = new Circle(500, 150, 50);
    head.setStrokeWidth(5);
    head.setStroke(Color.TOMATO);
    head.setFill(Color.TOMATO);
    
    final Button A = new Button("A");
    A.setLayoutX(50);
    A.setLayoutY(900);
    final Button B = new Button("B");
    B.setLayoutX(100);
    B.setLayoutY(900);
    final Button C = new Button("C");
    C.setLayoutX(150);
    C.setLayoutY(900);
    final Button D = new Button("D");
    D.setLayoutX(200);
    D.setLayoutY(900);
    final Button E = new Button("E");
    E.setLayoutX(250);
    E.setLayoutY(900);
    final Button F = new Button("F");
    F.setLayoutX(300);
    F.setLayoutY(900);
    final Button G = new Button("G");
    G.setLayoutX(350);
    G.setLayoutY(900);
    final Button H = new Button("H");
    H.setLayoutX(400);
    H.setLayoutY(900);
    final Button I = new Button("I");
    I.setLayoutX(450);
    I.setLayoutY(900);
    final Button J = new Button("J");
    J.setLayoutX(500);
    J.setLayoutY(900);
    final Button K = new Button("K");
    K.setLayoutX(550);
    K.setLayoutY(900);
    final Button L = new Button("L");
    L.setLayoutX(600);
    L.setLayoutY(900);
    final Button M = new Button("M");
    M.setLayoutX(650);
    M.setLayoutY(900);
    final Button N = new Button("N");
    N.setLayoutX(700);
    N.setLayoutY(900);
    final Button O = new Button("O");
    O.setLayoutX(750);
    O.setLayoutY(900);
    final Button P = new Button("P");
    P.setLayoutX(800);
    P.setLayoutY(900);
    final Button Q = new Button("Q");
    Q.setLayoutX(850);
    Q.setLayoutY(900);
    final Button R = new Button("R");
    R.setLayoutX(900);
    R.setLayoutY(900);
    final Button S = new Button("S");
    S.setLayoutX(950);
    S.setLayoutY(900);
    final Button T = new Button("T");
    T.setLayoutX(1000);
    T.setLayoutY(900);
    final Button U = new Button("U");
    U.setLayoutX(1050);
    U.setLayoutY(900);
    final Button V = new Button("V");
    V.setLayoutX(1100);
    V.setLayoutY(900);
    final Button W = new Button("W");
    W.setLayoutX(1150);
    W.setLayoutY(900);
    final Button X = new Button("X");
    X.setLayoutX(1200);
    X.setLayoutY(900);
    final Button Y = new Button("Y");
    Y.setLayoutX(1250);
    Y.setLayoutY(900);
    final Button Z = new Button("Z");
    Z.setLayoutX(1300);
    Z.setLayoutY(900);
    pane.getChildren().addAll(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y ,Z);
    
    A.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("A") == true || secretWord.contains("a") == true)//make letter appear in correct field
           {
               for(int index = 0; index < secretWord.length(); index++)
               {
                   if (charArraySecretWord[index] == 'A' || charArraySecretWord[index] == 'a')
                   {
                       pane.getChildren().remove(A);
                       Text displayText = new Text((index + 1) * 15 + 885 , 350, "A");
                       pane.getChildren().add(displayText);
                   }
               }
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(A);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
                   pane.getChildren().addAll(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y ,Z);
               }
           }
        }
    });
    B.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("B") == true || secretWord.contains("b") == true)//make letter appear in correct field
           {
               for(int index = 0; index < secretWord.length(); index++)
               {
                   if (charArraySecretWord[index] == 'B' || charArraySecretWord[index] == 'b')
                   {
                       pane.getChildren().remove(A);
                       Text displayText = new Text((index + 1) * 15 + 885 , 350, "B");
                       pane.getChildren().add(displayText);
                   }
               }
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(B);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else if (stickManPartsCount == 5)
               {
                   pane.getChildren().add(head);
                   Text lostText = new Text(900, 200,"Game Over");
                   pane.getChildren().add(lostText);
               }
               else
               {
                   
               }
           }
        }
    });
    C.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("C") == true || secretWord.contains("c") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(C);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    D.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("D") == true || secretWord.contains("d") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(D);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    E.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("E") == true || secretWord.contains("e") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(E);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    F.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("F") == true || secretWord.contains("f") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(F);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    G.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("G") == true || secretWord.contains("g") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(G);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    H.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("H") == true || secretWord.contains("h") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(H);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    I.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("I") == true || secretWord.contains("i") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(I);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    J.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("J") == true || secretWord.contains("j") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(J);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    K.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("K") == true || secretWord.contains("k") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(K);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    L.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("L") == true || secretWord.contains("l") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(L);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    M.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("M") == true || secretWord.contains("m") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(M);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    N.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("N") == true || secretWord.contains("n") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(N);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    O.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("O") == true || secretWord.contains("o") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(O);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    P.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("P") == true || secretWord.contains("p") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(P);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    Q.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("Q") == true || secretWord.contains("q") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(Q);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    R.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("R") == true || secretWord.contains("r") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(R);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    S.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("S") == true || secretWord.contains("s") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(S);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    T.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("T") == true || secretWord.contains("t") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(T);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    U.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("U") == true || secretWord.contains("u") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(U);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    V.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("V") == true || secretWord.contains("v") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(V);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    W.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("W") == true || secretWord.contains("w") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(W);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    X.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("X") == true || secretWord.contains("x") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(X);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    Y.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("Y") == true || secretWord.contains("y") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(Y);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
    Z.setOnAction(new EventHandler<ActionEvent>()
    {
        @Override
        public void handle(ActionEvent event)
        {
           if(secretWord.contains("Z") == true || secretWord.contains("z") == true)//make letter appear in correct field
           {
               System.out.print("NIIIIIIIIIICE");
           }
           else//put letter on side (hide letter) and make part appear
           {
               pane.getChildren().remove(Z);
               if(stickManPartsCount < 5)
               {
                   pane.getChildren().add(stickManParts[stickManPartsCount]);
                   stickManPartsCount++;
               }
               else
               {
                   pane.getChildren().add(head);
               }
           }
        }
    });
  }
  
  private String getSecretWord(TextField secretWord)
  {
      String mySecretWord = secretWord.getText();
      
      return mySecretWord;
  }
  
}

